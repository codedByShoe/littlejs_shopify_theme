{% assign selected_variant = product.selected_or_first_available_variant %}

<!-- TODO: create a better image selector on large screens -->
<div class="max-w-6xl mx-auto my-8">
  <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
    <div class="product--medias">
      <div class="hidden md:block">
        {% for media in product.media %}
          <div class="h-100 overflow-hidden p-2">
            {% render 'product-media'
              , media: media %}
          </div>
        {% endfor %}
      </div>

      <div class="md:hidden">
        <div class="product-swiper h-94">
          <div class="swiper-wrapper">
            {% for media in product.media %}
              <div class="swiper-slide">
                <div class="h-80 overflow-hidden p-2">
                  {% render 'product-media'
                    , media: media %}
                </div>
              </div>
            {% endfor %}
          </div>

          <div class="swiper-pagination"></div>

          <div class="swiper-button-prev"></div>
          <div class="swiper-button-next"></div>
        </div>
      </div>
    </div>

    <div class="product--information sticky top-5 p-2">

      <form id="productForm" class="space-y-6">
        <input
          id="product-id"
          type="hidden"
          name="id"
          value="{{ selected_variant.id }}">

        {% for block in section.blocks %}
          {% case block.type %}
            {% when 'vendor' %}
              <div class="my-3">
                <span class="text-xs text-gray-500">{{ product.vendor }}</span>
              </div>
            {% when 'title' %}
              <div class="my-3">
                <h1 class="text-3xl text-gray-900">{{ product.title }}</h1>
              </div>
            {% when 'price' %}
              <div class="my-3 flex items-center justify-start space-x-2" id="price-{{ section.id }}">
                <span v-cloak class="block text-base product-compare-at-price text-gray-500 line-through">${ money(comparePrice) }</span>
                <span v-cloak class="block text-lg product-price text-gray-900">${ money(price) }</span>
                {% if selected_variant.price < selected_variant.compare_at_price %}
                  <span class="block px-5 py-1 text-sm font-bold bg-red-500 rounded-full text-white mx-4">Sale</span>
                {% endif %}
              </div>
            {% when 'variant_selector' %}
              <template v-for="option in product.options" :key="option.position">
                <div class="my-3">
                  <fieldset>
                    <legend class="mb-2">${option.name}</legend>
                    <template v-for="(value, index) in option.values" :key="index">
                      <div class="inline space-x-1">
                        <input
                          type="radio"
                          :name="value"
                          :value="value"
                          v-model="selectedVariations[option.name]"
                          @change="addSelectedOptions(option.name, value)"
                          class="hidden"
                          :id="value" />

                        <label
                          :for="value"
                          :class="{'text-white bg-gray-900  hover:bg-gray-700': selectedVariations[option.name] === value, 'bg-white hover:bg-gray-900 hover:text-white': selectedVariations[option.name] !== value }"
                          class="font-medium px-4 py-2 cursor-pointer border border-gray-900 transition-all ease-in-out duration-100">${value}</label>
                      </div>
                    </template>
                  </fieldset>
                </div>
              </template>

            {% when 'quantity' %}
              <div class="my-3">
                <label for="Quantity-{{ section.id }}" class="sr-only">
                  Quantity
                </label>

                <div class="w-32 flex items-center rounded border border-gray-900">
                  <button
                    @click="quantity > 1 ? quantity-- : quantity = 1"
                    type="button"
                    class="h-10 w-10 leading-10 text-gray-900 transition hover:opacity-75">
                    &minus;
                  </button>

                  <input
                    type="number"
                    id="Quantity-{{ section.id }}"
                    name="Quantity-{{ section.id }}"
                    v-model="quantity"
                    class="h-10 w-16 border-transparent text-center [-moz-appearance:_textfield] sm:text-sm [&::-webkit-inner-spin-button]:m-0 [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:m-0 [&::-webkit-outer-spin-button]:appearance-none" />

                  <button
                    @click="quantity++"
                    type="button"
                    class="h-10 w-10 leading-10 text-gray-600 transition hover:opacity-75">
                    &plus;
                  </button>
                </div>
              </div>
            {% when 'description' %}
              <div class="my-3">
                <p class="text-gray-700">{{ product.description }}</p>
              </div>

            {% when 'checkout_buttons' %}
              <div class="my-3">
                <button
                  type="submit"
                  name="add"
                  @click="addToCart"
                  class="w-full px-6 py-4 bg-gray-900 text-white hover:bg-gray-700 rounded-sm my-2"
                  {% if selected_variant.available == false %}
                  disabled
                  {% endif %}>
                  {% if selected_variant.available == false %}
                    Sold out
                  {% else %}
                    Add to cart
                  {% endif %}
                </button>
              </div>
          {% else %}

            {% endcase %}
          {% endfor %}
        </form>
      </div>
    </div>
  </div>

  <script type="module">
    import { createApp, ref, onMounted } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js' 
    import { store, money } from '../assets/state.js'

    const productForm = createApp({
    delimiters: ['${', '}'],
      setup() {
        const url = ref('');
        const selectedVariant = ref({});
        const product = ref({});
        const price = ref(0);
        const comparePrice = ref(0);
        const quantity = ref(1);
        const selectedVariations = ref([]);
        const selectedOptions = ref({
          'option': '',
          'variation': ''
        });

        onMounted(() => {
          url.value = new URL(window.location.href);
          const productUrl = url.value.pathname + '.js';
          const params = new URLSearchParams(url.value.search)
          // matchedVariation.value = params.get('variant')

          fetch(productUrl)
            .then(response => response.json())
            .then((response) => {
              product.value = response
              price.value = product.value.price;
              comparePrice.value = product.value.compare_at_price
              console.log(product.value)
          });
          
        })
        /* This is not the cleanest thing in the world but it does a good job at catching edge cases instead of setting just
         * the values in an array and pulling v-model on the name of the value as some variations can have similar values
         * this way each selection is set with its option so v-model can check the value to the corresponding option
         */
        function addSelectedOptions(option, value) {
         if (selectedVariations.value.some(item => item.option === option)) {
          selectedVariations.value.forEach(item => item.option === option && (item.variation = value));
         }else {
          selectedOptions.value = {
            'option': option,
            'variation': value
          };
          selectedVariations.value.push(selectedOptions.value);
         }
          console.log(selectedVariations.value);
        }

        // probably move to store and make dynamic so I can use with mini cart
        function addToCart(event) {
          event.preventDefault();
          let variant = product.value.variants.find(variant => {
                let pass = true;
                for(let i = 0; i < selectedOptions.value.length; i++) {
                    if(selectedOptions.value.indexOf(variant.options[i]) === -1) {
                        pass = false
                        break
                    }
                };
                return pass;
            });
            // got the variant now just send it
            selectedVariant.value = variant;
            console.log(selectedVariant.value);
            // check quantity_rule before submitting
            console.log(quantity.value);

        }
        
        return {
          product,
          selectedOptions,
          selectedVariations,
          addSelectedOptions,
          addToCart,
          selectedOptions,
          quantity,
          price,
          comparePrice,
          money
        }
      }

     }).mount('#productForm')
  </script>

  {% schema %}
    {
      "name": "Product",
      "blocks": [
        {
          "type": "vendor",
          "name": "Vendor",
          "limit": 1
        },
        {
          "type": "title",
          "name": "Title",
          "limit": 1
        },
        {
          "type": "price",
          "name": "Price",
          "limit": 1
        },
        {
          "type": "variant_selector",
          "name": "Variant Selector",
          "limit": 1
        }, {
          "type": "quantity",
          "name": "Quantity",
          "limit": 1
        }, {
          "type": "description",
          "name": "Description",
          "limit": 1
        }, {
          "type": "checkout_buttons",
          "name": "Checkout Buttons",
          "limit": 1
        }
      ]
    }
  {% endschema %}